service: build-pelican-in-lambda

plugins:
  - serverless-python-requirements
custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"
  pythonRequirements:
    dockerizePip: true
  site_name: chrabasz.cz
  git_repo: https://github.com/alchrabas/blog.git
  git_repo_theme: https://github.com/alchrabas/crowsfoot.git
  theme_name: crowsfoot
  acm_certificate_arn: "arn:aws:acm:us-east-1:743153929666:certificate/92ba3644-466a-4cf9-beea-ab97466fe960"


provider:
  name: aws
  runtime: python3.6
  stage: ${self:custom.stage}
  environment:
    LOG_LEVEL: ${self:custom.log_level}
  stackTags:
    x-service: build-pelican-in-lambda
    x-stack: ${self:service}-${self:provider.stage}
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join: ['', [Fn::GetAtt: [ BlogBucket, Arn ], '/*'] ]


functions:
  async_rebuild_blog_from_git:
    handler: handlers/action.async_handler
    description: "Rebuilds pelican blog from contents stored in git"
    memorySize: 512
    timeout: 600
    environment:
      BUCKET_NAME: ${self:custom.site_name}
      URL_TO_GIT_REPO_HTTPS: ${self:custom.git_repo}
      URL_TO_GIT_REPO_THEME_HTTPS: ${self:custom.git_repo_theme}
      THEME_NAME: ${self:custom.theme_name}
  rebuild_blog_from_git:
    handler: handlers/action.http_rebuild_blog
    description: "Makes async call to async_rebuild_blog_from_git lambda"
    memorySize: 128
    timeout: 3
    environment:
      LAMBDA_REBUILD_ASYNC: build-pelican-in-lambda-${self:custom.stage}-async_rebuild_blog_from_git
    events:
      - http:
          path: rebuild
          method: get
      - http:
          path: rebuild
          method: post


resources:
  Resources:
    BlogBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.site_name}
        AccessControl: PublicRead
    BlogBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: BlogBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": "BlogBucket"
                  },
                  "/*"
                ]
                ]
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distribution for a static blog in S3
          DefaultCacheBehavior:
            TargetOriginId: BlogOrigin
            AllowedMethods:
              - GET
              - HEAD
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 30
            MaxTTL: 60
            ForwardedValues:
              QueryString: false
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.acm_certificate_arn}
            SslSupportMethod: sni-only
          Enabled: true
          Aliases:
            - ${self:custom.site_name}
          DefaultRootObject: index.html
          Origins:
            - Id: BlogOrigin
              DomainName: ${self:custom.site_name}.s3.amazonaws.com
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: {Fn::GetAtt: [ CloudFrontDistribution, DomainName ]}
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.site_name}.
        Name:
          Ref: BlogBucket
        Type: 'A'
    DnsRecordWww:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: {Fn::GetAtt: [ CloudFrontDistribution, DomainName ]}
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.site_name}.
        Name:
          Fn::Join: [
            "", [
            "www.",
            {
              "Ref": "BlogBucket"
            },
          ]]
        Type: 'A'

package:
  exclude:
    - node_modules/**
    - .venv/**